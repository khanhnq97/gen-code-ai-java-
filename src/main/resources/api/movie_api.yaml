openapi: 3.0.3
info:
  title: Movie API
  version: 1.0.0
servers:
  - url: http://localhost:8080/api
tags:
  - name: Movies
    description: Operations about movies
paths:
  /movies:
    get:
      tags:
        - Movies
      summary: List all movies
      operationId: getMovies
      description: Generates a list of all movies
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MovieResponse'
    post:
      summary: Create a new movie
      operationId: createMovie
      tags:
        - Movies
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovieRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieResponse'
    put:
      tags:
        - Movies
      summary: Update details of a specific movie
      operationId: updateMovie
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovieRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieResponse'
        '404':
          $ref: '#/components/responses/MovieNotFound'
        '409':
          $ref: '#/components/responses/MovieAlreadyExists'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /movies/{id}:
    get:
      tags:
        - Movies
      summary: Get details of a specific movie
      operationId: getMovieById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieResponse'
        '404':
          $ref: '#/components/responses/MovieNotFound'
    delete:
      tags:
        - Movies
      summary: Delete a specific movie
      operationId: deleteMovie
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: No Content
        '404':
          $ref: '#/components/responses/MovieNotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /showtimes:
    get:
      summary: List all showtimes
      tags:
        - Showtimes
      operationId: getShowtimes
      description: Generates a list of all showtimes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ShowtimeResponse'
    post:
      summary: Create a new showtime
      operationId: createShowtime
      tags:
        - Showtimes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShowtimeRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShowtimeResponse'
    put:
      summary: Update details of a specific showtime
      operationId: updateShowtime
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShowtimeRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShowtimeResponse'
        '404':
          $ref: '#/components/responses/ShowtimeNotFound'
        '409':
          $ref: '#/components/responses/ShowtimeAlreadyExists'
        '500':
          $ref: '#/components/responses/InternalServerError'
      tags:
        - Showtimes
  /showtimes/{id}:
    get:
      summary: Get details of a specific showtime
      operationId: getShowtimeById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShowtimeResponse'
        '404':
          $ref: '#/components/responses/ShowtimeNotFound'
      tags:
        - Showtimes
    delete:
      summary: Delete a specific showtime
      operationId: deleteShowtime
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: No Content
        '404':
          $ref: '#/components/responses/ShowtimeNotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      tags:
        - Showtimes

  /bookings:
    get:
      summary: List all bookings
      operationId: getBookings
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookingResponse'
      tags:
        - Bookings
    post:
      summary: Create a new booking
      operationId: createBooking
      tags:
        - Bookings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingResponse'
    put:
      summary: Update details of a specific booking (e.g., add/remove tickets)
      operationId: updateBooking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingResponse'
        '404':
          $ref: '#/components/responses/BookingNotFound'
        '409':
          $ref: '#/components/responses/BookingAlreadyExists'
        '422':
          $ref: '#/components/responses/InsufficientTicketsAvailable'
        '500':
          $ref: '#/components/responses/InternalServerError'
      tags:
        - Bookings
  /bookings/{id}:
    get:
      summary: Get details of a specific booking
      operationId: getBookingById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingResponse'
        '404':
          $ref: '#/components/responses/BookingNotFound'
      tags:
        - Bookings
    delete:
      summary: Cancel a booking
      operationId: cancelBooking
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: No Content
        '404':
          $ref: '#/components/responses/BookingNotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      tags:
        - Bookings

  /customers:
    get:
      tags:
        - Customers
      summary: List all customers
      operationId: getCustomers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomerResponse'
    post:
      tags:
        - Customers
      summary: Register a new customer
      operationId: createCustomer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
    put:
      tags:
        - Customers
      summary: Update details of a specific customer
      operationId: updateCustomer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
        '404':
          $ref: '#/components/responses/CustomerNotFound'
        '409':
          $ref: '#/components/responses/CustomerAlreadyExists'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /customers/{id}:
    get:
      tags:
        - Customers
      summary: Get details of a specific customer
      operationId: getCustomerById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
        '404':
          $ref: '#/components/responses/CustomerNotFound'
    delete:
      tags:
        - Customers
      summary: Delete a customer account (only admin users can perform this action)
      operationId: deleteCustomer
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: No Content
        '404':
          $ref: '#/components/responses/CustomerNotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /employees:
    get:
      summary: List all employees
      operationId: getEmployees
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EmployeeResponse'
      tags:
        - Employees
    post:
      summary: Add a new employee
      operationId: createEmployee
      tags:
        - Employees
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeResponse'
    put:
      summary: Update details of a specific employee
      operationId: updateEmployee
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeResponse'
        '404':
          $ref: '#/components/responses/EmployeeNotFound'
        '409':
          $ref: '#/components/responses/EmployeeAlreadyExists'
        '500':
          $ref: '#/components/responses/InternalServerError'
      tags:
        - Employees
  /employees/{id}:
    get:
      summary: Get details of a specific employee
      operationId: getEmployeeById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeResponse'
        '404':
          $ref: '#/components/responses/EmployeeNotFound'
      tags:
        - Employees
    delete:
      summary: Delete an employee (only admin users can perform this action)
      operationId: deleteEmployee
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: No Content
        '404':
          $ref: '#/components/responses/EmployeeNotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      tags:
        - Employees
  /promotions:
    get:
      summary: List all promotions
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Promotion'
      tags:
        - Promotions
    post:
      summary: Create a new promotion
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Promotion'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Promotion'
      tags:
        - Promotions
  /promotions/{id}:
    get:
      summary: Get details of a specific promotion
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Promotion'
        '404':
          description: Not Found
      tags:
        - Promotions
    put:
      summary: Update an existing promotion
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Promotion'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Promotion'
        '400':
          description: Bad Request
        '404':
          description: Not Found
      tags:
        - Promotions
    delete:
      summary: Delete a promotion
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
      tags:
        - Promotions
  /reports/revenue:
    get:
      summary: Get revenue report
      description: Generates a report summarizing revenue data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalRevenue:
                    type: number
                    description: Total revenue generated
                  revenueByMovie:
                    type: object
                    description: Revenue breakdown by movie
                    additionalProperties:
                      type: number
                      description: Revenue for a specific movie
      tags:
        - Reports
  /reports/attendance:
    get:
      summary: Get movie attendance report
      description: Generates a report summarizing movie attendance data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalAttendance:
                    type: number
                    description: Total number of movie attendees
                  attendanceByMovie:
                    type: object
                    description: Attendance breakdown by movie
                    additionalProperties:
                      type: number
                      description: Attendance for a specific movie
      tags:
        - Reports
  /reports/popular-movies:
    get:
      summary: Get list of popular movies
      description: Generates a list of the most popular movies based on attendance
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PopularMovie'
      tags:
        - Reports

components:
  schemas:
    MovieRequest:
      type: object
      properties:
        movieId:
          type: integer
          description: Unique identifier for the movie
        title:
          type: string
          description: Title of the movie
        description:
          type: string
          description: Description of the movie
        duration:
          type: integer
          format: int32
          description: Duration of the movie in minutes
        releaseDate:
          type: string
          format: date-time
          description: Release date of the movie
        genre:
          type: string
          description: Genre of the movie
        director:
          type: string
          description: Director of the movie
        cast:
          type: string
          description: List of actors in the movie
    MovieResponse:
      type: object
      properties:
        movieId:
          type: integer
          description: Unique identifier for the movie
        title:
          type: string
          description: Title of the movie
        description:
          type: string
          description: Description of the movie
        duration:
          type: integer
          format: int32
          description: Duration of the movie in minutes
        releaseDate:
          type: string
          format: date-time
          description: Release date of the movie
        genre:
          type: string
          description: Genre of the movie
        director:
          type: string
          description: Director of the movie
        cast:
          type: string
          description: List of actors in the movie

    ShowtimeRequest:
      type: object
      properties:
        showtimeId:
          type: integer
          description: Unique identifier for the showtime
        movieId:
          type: integer
          description: ID of the movie being shown
        theaterId:
          type: integer
          description: ID of the theater where the showtime is taking place
        startTime:
          type: string
          format: date-time
          description: Start time of the showtime
        endTime:
          type: string
          format: date-time
          description: End time of the showtime
        price:
          type: number
          format: double
          description: Ticket price for the showtime
    ShowtimeResponse:
      type: object
      properties:
        showtimeId:
          type: integer
          description: Unique identifier for the showtime
        movieId:
          type: integer
          description: ID of the movie being shown
        theaterId:
          type: integer
          description: ID of the theater where the showtime is taking place
        startTime:
          type: string
          format: date-time
          description: Start time of the showtime
        endTime:
          type: string
          format: date-time
          description: End time of the showtime
        price:
          type: number
          format: double
          description: Ticket price for the showtime

    BookingRequest:
      type: object
      properties:
        bookingId:
          type: integer
          description: Unique identifier for the booking
        customerId:
          type: integer
          description: ID of the customer who made the booking
        showtimeId:
          type: integer
          description: ID of the showtime associated with the booking
        bookingDate:
          type: string
          format: date-time
          description: Date and time the booking was made
        totalAmount:
          type: number
          format: double
          description: Total amount paid for the booking
        ticketPrice:
          type: number
          format: double
          description: Ticket price for the showtime
    BookingResponse:
      type: object
      properties:
        bookingId:
          type: integer
          description: Unique identifier for the booking
        customerId:
          type: integer
          description: ID of the customer who made the booking
        showtimeId:
          type: integer
          description: ID of the showtime associated with the booking
        bookingDate:
          type: string
          format: date-time
          description: Date and time the booking was made
        totalAmount:
          type: number
          format: double
          description: Total amount paid for the booking
        ticketPrice:
          type: number
          format: double
          description: Ticket price for the showtime
        movieId:
          type: integer
          description: ID of the movie being shown

    CustomerRequest:
      type: object
      properties:
        customerId:
          type: integer
          description: Unique identifier for the customer
        name:
          type: string
          description: Customer's full name
        email:
          type: string
          format: email
          description: Customer's email address
        phone:
          type: string
          description: Customer's phone number
        password:
          type: string
          format: password
          description: Customer's password (should be encrypted)
        avatar:
          type: string
          description: Customer's avatar
        membershipStatus:
          type: string
          enum:
            - Basic
            - Premium
          description: Customer's membership status
    CustomerResponse:
      type: object
      properties:
        customerId:
          type: integer
          description: Unique identifier for the customer
        name:
          type: string
          description: Customer's full name
        email:
          type: string
          format: email
          description: Customer's email address
        phone:
          type: string
          description: Customer's phone number
        password:
          type: string
          format: password
          description: Customer's password (should be encrypted)
        avatar:
          type: string
          description: Customer's avatar
        membershipStatus:
          type: string
          enum:
            - Basic
            - Premium
          description: Customer's membership status

    EmployeeResponse:
      type: object
      properties:
        employeeId:
          type: integer
          description: Unique identifier for the employee
        name:
          type: string
          description: Employee's full name
        email:
          type: string
          format: email
          description: Employee's email address
        phone:
          type: string
          description: Employee's phone number
        position:
          type: string
          description: Employee's job position
        password:
          type: string
          format: password
          description: Employee's password (should be encrypted)
    EmployeeRequest:
      type: object
      properties:
        employeeId:
          type: integer
          description: Unique identifier for the employee
        name:
          type: string
          description: Employee's full name
        email:
          type: string
          format: email
          description: Employee's email address
        phone:
          type: string
          description: Employee's phone number
        position:
          type: string
          description: Employee's job position
        password:
          type: string
          format: password
          description: Employee's password (should be encrypted)

    Promotion:
      type: object
      properties:
        promotionId:
          type: integer
          description: Unique identifier for the promotion
          example: 1
        name:
          type: string
          description: Name of the promotion
          example: "Summer Sale"
        description:
          type: string
          description: Description of the promotion
          example: "Get 20% off all items!"
        discountPercent:
          type: number
          description: Discount percentage offered by the promotion (0-1)
          example: 0.2
        startDate:
          type: string
          format: date-time
          description: Start date of the promotion (ISO 8601 format)
          example: "2024-07-15T00:00:00Z"
        endDate:
          type: string
          format: date-time
          description: End date of the promotion (ISO 8601 format)
          example: "2024-08-31T23:59:59Z"
      required:
        - promotionId
        - name
        - description
        - discountPercent
        - startDate
        - endDate

    PopularMovie:
      type: object
      properties:
        movieId:
          type: integer
          description: Unique identifier for the movie
        movieTitle:
          type: string
          description: Title of the movie
        attendanceCount:
          type: number
          description: Total attendance for the movie
  responses:
    MovieNotFound:
      description: The specified movie was not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: Error message indicating movie not found

    MovieAlreadyExists:
      description: A movie with the same ID already exists
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: Error message indicating duplicate movie ID

    InternalServerError:
      description: An internal server error occurred
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: Generic error message

    MovieCreated:
      description: Movie created successfully
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: Success message indicating movie creation
              movie:
                $ref: '#/components/schemas/MovieResponse'
    ShowtimeNotFound:
      description: The specified showtime was not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: Error message indicating showtime not found

    ShowtimeAlreadyExists:
      description: A showtime with the same ID already exists
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: Error message indicating duplicate showtime ID
    BookingNotFound:
      description: The specified booking was not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: Error message indicating booking not found

    BookingAlreadyExists:
      description: A booking with the same ID already exists
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: Error message indicating duplicate booking ID

    InsufficientTicketsAvailable:
      description: There are not enough tickets available for the requested showtime
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: Error message indicating insufficient tickets
    CustomerNotFound:
      description: The specified customer was not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: Error message indicating customer not found

    CustomerAlreadyExists:
      description: A customer with the same email already exists
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: Error message indicating duplicate customer email

    InvalidPassword:
      description: The provided password is invalid
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: Error message indicating invalid password
    EmployeeNotFound:
      description: The specified employee was not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: Error message indicating employee not found

    EmployeeAlreadyExists:
      description: An employee with the same email already exists
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: Error message indicating duplicate employee email
