/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.gen_code_ai.web;

import com.example.gen_code_ai.dto.CustomerRequest;
import com.example.gen_code_ai.dto.CustomerResponse;
import com.example.gen_code_ai.dto.UpdateCustomer404Response;
import com.example.gen_code_ai.dto.UpdateCustomer409Response;
import com.example.gen_code_ai.dto.UpdateMovie500Response;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-07-19T00:56:02.813115+07:00[Asia/Ho_Chi_Minh]")
@Validated
@Tag(name = "Customers", description = "the Customers API")
public interface CustomersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /customers : Register a new customer
     *
     * @param customerRequest  (required)
     * @return Created (status code 201)
     */
    @Operation(
        operationId = "createCustomer",
        summary = "Register a new customer",
        tags = { "Customers" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CustomerResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/customers",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<CustomerResponse> createCustomer(
        @Parameter(name = "CustomerRequest", description = "", required = true) @Valid @RequestBody CustomerRequest customerRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"password\" : \"password\", \"phone\" : \"phone\", \"customerId\" : 0, \"name\" : \"name\", \"avatar\" : \"avatar\", \"membershipStatus\" : \"Basic\", \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /customers/{id} : Delete a customer account (only admin users can perform this action)
     *
     * @param id  (required)
     * @return No Content (status code 204)
     *         or The specified customer was not found (status code 404)
     *         or An internal server error occurred (status code 500)
     */
    @Operation(
        operationId = "deleteCustomer",
        summary = "Delete a customer account (only admin users can perform this action)",
        tags = { "Customers" },
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content"),
            @ApiResponse(responseCode = "404", description = "The specified customer was not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UpdateCustomer404Response.class))
            }),
            @ApiResponse(responseCode = "500", description = "An internal server error occurred", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UpdateMovie500Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/customers/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> deleteCustomer(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /customers/{id} : Get details of a specific customer
     *
     * @param id  (required)
     * @return OK (status code 200)
     *         or The specified customer was not found (status code 404)
     */
    @Operation(
        operationId = "getCustomerById",
        summary = "Get details of a specific customer",
        tags = { "Customers" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CustomerResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "The specified customer was not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UpdateCustomer404Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/customers/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<CustomerResponse> getCustomerById(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"password\" : \"password\", \"phone\" : \"phone\", \"customerId\" : 0, \"name\" : \"name\", \"avatar\" : \"avatar\", \"membershipStatus\" : \"Basic\", \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /customers : List all customers
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getCustomers",
        summary = "List all customers",
        tags = { "Customers" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = CustomerResponse.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/customers",
        produces = { "application/json" }
    )
    default ResponseEntity<List<CustomerResponse>> getCustomers(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"password\" : \"password\", \"phone\" : \"phone\", \"customerId\" : 0, \"name\" : \"name\", \"avatar\" : \"avatar\", \"membershipStatus\" : \"Basic\", \"email\" : \"email\" }, { \"password\" : \"password\", \"phone\" : \"phone\", \"customerId\" : 0, \"name\" : \"name\", \"avatar\" : \"avatar\", \"membershipStatus\" : \"Basic\", \"email\" : \"email\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /customers : Update details of a specific customer
     *
     * @param customerRequest  (required)
     * @return OK (status code 200)
     *         or The specified customer was not found (status code 404)
     *         or A customer with the same email already exists (status code 409)
     *         or An internal server error occurred (status code 500)
     */
    @Operation(
        operationId = "updateCustomer",
        summary = "Update details of a specific customer",
        tags = { "Customers" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CustomerResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "The specified customer was not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UpdateCustomer404Response.class))
            }),
            @ApiResponse(responseCode = "409", description = "A customer with the same email already exists", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UpdateCustomer409Response.class))
            }),
            @ApiResponse(responseCode = "500", description = "An internal server error occurred", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UpdateMovie500Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/customers",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<CustomerResponse> updateCustomer(
        @Parameter(name = "CustomerRequest", description = "", required = true) @Valid @RequestBody CustomerRequest customerRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"password\" : \"password\", \"phone\" : \"phone\", \"customerId\" : 0, \"name\" : \"name\", \"avatar\" : \"avatar\", \"membershipStatus\" : \"Basic\", \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
