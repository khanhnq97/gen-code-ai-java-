/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.gen_code_ai.web;

import com.example.gen_code_ai.dto.BookingRequest;
import com.example.gen_code_ai.dto.BookingResponse;
import com.example.gen_code_ai.dto.UpdateBooking404Response;
import com.example.gen_code_ai.dto.UpdateBooking409Response;
import com.example.gen_code_ai.dto.UpdateBooking422Response;
import com.example.gen_code_ai.dto.UpdateMovie500Response;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-07-18T12:52:09.357085+07:00[Asia/Ho_Chi_Minh]")
@Validated
@Tag(name = "Bookings", description = "the Bookings API")
public interface BookingsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /bookings/{id} : Cancel a booking
     *
     * @param id  (required)
     * @return No Content (status code 204)
     *         or The specified booking was not found (status code 404)
     *         or An internal server error occurred (status code 500)
     */
    @Operation(
        operationId = "cancelBooking",
        summary = "Cancel a booking",
        tags = { "Bookings" },
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content"),
            @ApiResponse(responseCode = "404", description = "The specified booking was not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UpdateBooking404Response.class))
            }),
            @ApiResponse(responseCode = "500", description = "An internal server error occurred", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UpdateMovie500Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/bookings/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> cancelBooking(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /bookings : Create a new booking
     *
     * @param bookingRequest  (required)
     * @return Created (status code 201)
     */
    @Operation(
        operationId = "createBooking",
        summary = "Create a new booking",
        tags = { "Bookings" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BookingResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/bookings",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<BookingResponse> createBooking(
        @Parameter(name = "BookingRequest", description = "", required = true) @Valid @RequestBody BookingRequest bookingRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"totalAmount\" : 5.962133916683182, \"ticketPrice\" : 5.637376656633329, \"customerId\" : 6, \"showtimeId\" : 1, \"bookingDate\" : \"2000-01-23T04:56:07.000+00:00\", \"movieId\" : 2, \"bookingId\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /bookings/{id} : Get details of a specific booking
     *
     * @param id  (required)
     * @return OK (status code 200)
     *         or The specified booking was not found (status code 404)
     */
    @Operation(
        operationId = "getBookingById",
        summary = "Get details of a specific booking",
        tags = { "Bookings" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BookingResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "The specified booking was not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UpdateBooking404Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/bookings/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<BookingResponse> getBookingById(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"totalAmount\" : 5.962133916683182, \"ticketPrice\" : 5.637376656633329, \"customerId\" : 6, \"showtimeId\" : 1, \"bookingDate\" : \"2000-01-23T04:56:07.000+00:00\", \"movieId\" : 2, \"bookingId\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /bookings : List all bookings
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getBookings",
        summary = "List all bookings",
        tags = { "Bookings" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = BookingResponse.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/bookings",
        produces = { "application/json" }
    )
    default ResponseEntity<List<BookingResponse>> getBookings(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"totalAmount\" : 5.962133916683182, \"ticketPrice\" : 5.637376656633329, \"customerId\" : 6, \"showtimeId\" : 1, \"bookingDate\" : \"2000-01-23T04:56:07.000+00:00\", \"movieId\" : 2, \"bookingId\" : 0 }, { \"totalAmount\" : 5.962133916683182, \"ticketPrice\" : 5.637376656633329, \"customerId\" : 6, \"showtimeId\" : 1, \"bookingDate\" : \"2000-01-23T04:56:07.000+00:00\", \"movieId\" : 2, \"bookingId\" : 0 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /bookings : Update details of a specific booking (e.g., add/remove tickets)
     *
     * @param bookingRequest  (required)
     * @return OK (status code 200)
     *         or The specified booking was not found (status code 404)
     *         or A booking with the same ID already exists (status code 409)
     *         or There are not enough tickets available for the requested showtime (status code 422)
     *         or An internal server error occurred (status code 500)
     */
    @Operation(
        operationId = "updateBooking",
        summary = "Update details of a specific booking (e.g., add/remove tickets)",
        tags = { "Bookings" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BookingResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "The specified booking was not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UpdateBooking404Response.class))
            }),
            @ApiResponse(responseCode = "409", description = "A booking with the same ID already exists", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UpdateBooking409Response.class))
            }),
            @ApiResponse(responseCode = "422", description = "There are not enough tickets available for the requested showtime", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UpdateBooking422Response.class))
            }),
            @ApiResponse(responseCode = "500", description = "An internal server error occurred", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UpdateMovie500Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/bookings",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<BookingResponse> updateBooking(
        @Parameter(name = "BookingRequest", description = "", required = true) @Valid @RequestBody BookingRequest bookingRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"totalAmount\" : 5.962133916683182, \"ticketPrice\" : 5.637376656633329, \"customerId\" : 6, \"showtimeId\" : 1, \"bookingDate\" : \"2000-01-23T04:56:07.000+00:00\", \"movieId\" : 2, \"bookingId\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
