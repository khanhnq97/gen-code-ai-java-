/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.gen_code_ai.web;

import com.example.gen_code_ai.dto.Movie;
import com.example.gen_code_ai.dto.MovieRequest;
import com.example.gen_code_ai.dto.UpdateMovie404Response;
import com.example.gen_code_ai.dto.UpdateMovie409Response;
import com.example.gen_code_ai.dto.UpdateMovie500Response;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-07-17T10:31:45.710274+07:00[Asia/Ho_Chi_Minh]")
@Validated
@Tag(name = "Movies", description = "Operations about movies")
public interface MoviesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /movies : Create a new movie
     *
     * @param movieRequest  (required)
     * @return Created (status code 201)
     */
    @Operation(
        operationId = "createMovie",
        summary = "Create a new movie",
        tags = { "Movies" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Movie.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/movies",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Movie> createMovie(
        @Parameter(name = "MovieRequest", description = "", required = true) @Valid @RequestBody MovieRequest movieRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"duration\" : 0, \"cast\" : \"cast\", \"releaseDate\" : \"2000-01-23T04:56:07.000+00:00\", \"director\" : \"director\", \"genre\" : \"genre\", \"description\" : \"description\", \"movieId\" : \"movieId\", \"title\" : \"title\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /movies/{id} : Delete a specific movie
     *
     * @param id  (required)
     * @return No Content (status code 204)
     *         or The specified movie was not found (status code 404)
     *         or An internal server error occurred (status code 500)
     */
    @Operation(
        operationId = "deleteMovie",
        summary = "Delete a specific movie",
        tags = { "Movies" },
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content"),
            @ApiResponse(responseCode = "404", description = "The specified movie was not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UpdateMovie404Response.class))
            }),
            @ApiResponse(responseCode = "500", description = "An internal server error occurred", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UpdateMovie500Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/movies/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> deleteMovie(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /movies/{id} : Get details of a specific movie
     *
     * @param id  (required)
     * @return OK (status code 200)
     *         or The specified movie was not found (status code 404)
     */
    @Operation(
        operationId = "getMovieById",
        summary = "Get details of a specific movie",
        tags = { "Movies" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Movie.class))
            }),
            @ApiResponse(responseCode = "404", description = "The specified movie was not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UpdateMovie404Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/movies/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Movie> getMovieById(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"duration\" : 0, \"cast\" : \"cast\", \"releaseDate\" : \"2000-01-23T04:56:07.000+00:00\", \"director\" : \"director\", \"genre\" : \"genre\", \"description\" : \"description\", \"movieId\" : \"movieId\", \"title\" : \"title\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /movies : List all movies
     * Generates a list of all movies
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getMovies",
        summary = "List all movies",
        description = "Generates a list of all movies",
        tags = { "Movies" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Movie.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/movies",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Movie>> getMovies(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"duration\" : 0, \"cast\" : \"cast\", \"releaseDate\" : \"2000-01-23T04:56:07.000+00:00\", \"director\" : \"director\", \"genre\" : \"genre\", \"description\" : \"description\", \"movieId\" : \"movieId\", \"title\" : \"title\" }, { \"duration\" : 0, \"cast\" : \"cast\", \"releaseDate\" : \"2000-01-23T04:56:07.000+00:00\", \"director\" : \"director\", \"genre\" : \"genre\", \"description\" : \"description\", \"movieId\" : \"movieId\", \"title\" : \"title\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /movies : Update details of a specific movie
     *
     * @param movie  (required)
     * @return OK (status code 200)
     *         or The specified movie was not found (status code 404)
     *         or A movie with the same ID already exists (status code 409)
     *         or An internal server error occurred (status code 500)
     */
    @Operation(
        operationId = "updateMovie",
        summary = "Update details of a specific movie",
        tags = { "Movies" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Movie.class))
            }),
            @ApiResponse(responseCode = "404", description = "The specified movie was not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UpdateMovie404Response.class))
            }),
            @ApiResponse(responseCode = "409", description = "A movie with the same ID already exists", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UpdateMovie409Response.class))
            }),
            @ApiResponse(responseCode = "500", description = "An internal server error occurred", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UpdateMovie500Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/movies",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Movie> updateMovie(
        @Parameter(name = "Movie", description = "", required = true) @Valid @RequestBody Movie movie
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"duration\" : 0, \"cast\" : \"cast\", \"releaseDate\" : \"2000-01-23T04:56:07.000+00:00\", \"director\" : \"director\", \"genre\" : \"genre\", \"description\" : \"description\", \"movieId\" : \"movieId\", \"title\" : \"title\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
